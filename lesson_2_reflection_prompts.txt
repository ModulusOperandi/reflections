What happens when you initialize a repository? Why do you need to do it?

	- When you initialize git, you're telling git to change the current directory into a version controlled directory. Init usually starts a program and in the same way, git init creates a 
	.git file to track future changes. You need to do it because otherwise you couldn't use git in that directory!!

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	- The staging area is a temporary directory as opposed to the working directory and the repository. While the repository is where all the changes are made, once a new commit has been made, the staging area's status changes. Also, if you go into a different working directory that has git VS, you'll have a different staging area that coincides with that repository

How can you use the staging area to make sure you have one commit per logical
change?

	- You can use the diff --staged command to make sure that the only things you are committing are restricted to a single logical change

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	- Whenever you are building a new feature, you don't know what bugs there are so you would ideally want to build a new branch so as not to damage the already functioning master branch. This advantage of branches allows one to be more loose with changes and more experimental as you don't have to worry about destroying your working files.

How do the diagrams help you visualize the branch structure?

	- You can clearly see where the tree branched off which helps to see how many changes have been made since the branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	- The result is a new commit that takes all the changes since the common parent from both branches. The way it merges is by looking at the differences between the two branches and the original and patching together what should be placed in our new file. We represent it as a graph diagram as it clearly shows what commits are reachable from other commits and to see common parents of different branches. In doing so, we can easily check how much the files have changed.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	- The pros of automatic merging is that you don't have to manually do a bunch of merging of documents; it will automatically take everything that isn't the same from two documents and throw it together. The con of it is that you might end up putting stuff in there that isn't necessary so you might have to do some spring cleaning afterwards to make sure there isn't any unnecessary code. Doing a merge manually, on the other hand would be a laborious task, especially if you have thousands of lines of code written. On the other hand, if you did it manually, you would know exactly what you want to change.
